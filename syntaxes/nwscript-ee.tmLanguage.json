{
  "name": "Neverwinter Script",
  "scopeName": "source.nss",
  "patterns": [
    {
      "include": "#preprocessor-rule-enabled"
    },
    {
      "include": "#preprocessor-rule-disabled"
    },
    {
      "include": "#preprocessor-rule-conditional"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#switch_statement"
    },
    {
      "match": "\\b(break|continue|do|else|for|goto|if|default|return|while)\\b",
      "name": "keyword.control.nss"
    },
    {
      "include": "#storage_types"
    },
    {
      "match": "\\b_{0,1}[A-Z0-9]+(_[A-Z0-9]+)*(_[a-zA-Z0-9]+){0,1}_{0,1}(?!\\()\\b",
      "name": "constant.language.nss"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    },
    {
      "begin": "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.$3.nss"
        },
        "2": {
          "name": "punctuation.definition.directive.nss"
        }
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.include.nss",
      "patterns": [
        {
          "include": "#line_continuation_character"
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.nss"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.nss"
            }
          },
          "name": "string.quoted.double.include.nss"
        },
        {
          "begin": "<",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.nss"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.nss"
            }
          },
          "name": "string.quoted.other.lt-gt.include.nss"
        }
      ]
    },
    {
      "include": "#pragma-mark"
    },
    {
      "begin": "^\\s*((#)\\s*line)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.line.nss"
        },
        "2": {
          "name": "punctuation.definition.directive.nss"
        }
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.nss",
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    {
      "begin": "^\\s*(?:((#)\\s*pragma))\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.pragma.nss"
        },
        "2": {
          "name": "punctuation.definition.directive.nss"
        }
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.pragma.nss",
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "match": "[a-zA-Z_$][\\w\\-$]*",
          "name": "entity.other.attribute-name.pragma.preprocessor.nss"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    {
      "include": "#block"
    },
    {
      "include": "#parens"
    },
    {
      "name": "meta.function.nss",
      "begin": "(?<!\\w)(?!\\s*(?:)\\s*\\()(?=[a-zA-Z_]\\w*\\s*\\()",
      "end": "(?!\\G)(?<=\\))",
      "patterns": [
        {
          "include": "#function-innards"
        }
      ]
    },
    {
      "include": "#line_continuation_character"
    },
    {
      "match": ";",
      "name": "punctuation.terminator.statement.nss"
    },
    {
      "match": ",",
      "name": "punctuation.separator.delimiter.nss"
    },
    {
      "match": ",",
      "name": "variable.separator.delimiter.nss"
    },
    {
      "include": "#dot-access"
    },
    {
      "match": "\\b[a-zA-Z_][a-zA-Z_0-9]*\\b(?!\\s*\\()",
      "name": "variable.language.nss"
    }
  ],
  "repository": {
    "dot-access": {
      "match": "(\\.)([a-zA-Z_][a-zA-Z_0-9]*\\b(?!\\s*\\())",
      "captures": {
        "1": {
          "name": "punctuation.separator.dot-access.nss"
        },
        "2": {
          "name": "entity.other.attribute-name.nss"
        }
      }
    },
    "backslash_escapes": {
      "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3][0-7]{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
      "name": "constant.character.escape.nss"
    },
    "block": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.nss"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.nss"
            }
          },
          "name": "meta.block.nss",
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        }
      ]
    },
    "block_innards": {
      "patterns": [
        {
          "include": "#preprocessor-rule-enabled-block"
        },
        {
          "include": "#preprocessor-rule-disabled-block"
        },
        {
          "include": "#preprocessor-rule-conditional-block"
        },
        {
          "include": "#dot-access"
        },
        {
          "include": "#nwscript_function_call"
        },
        {
          "name": "meta.initialization.nss",
          "begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|return)\n\t(?<=\\w) \\s+()  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
          "beginCaptures": {
            "1": {
              "name": "variable.other.nss"
            },
            "2": {
              "name": "punctuation.section.parens.begin.bracket.round.initialization.nss"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.initialization.nss"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.nss"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.nss"
            }
          },
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "include": "#parens-block"
        },
        {
          "include": "$base"
        }
      ]
    },
    "nwscript_conditional_context": {
      "patterns": [
        {
          "include": "$self"
        },
        {
          "include": "#block_innards"
        }
      ]
    },
    "nwscript_function_call": {
      "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|return)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
      "end": "(?<=\\))(?!\\w)",
      "name": "meta.function-call.nss",
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "case_statement": {
      "name": "meta.conditional.case.nss",
      "begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)case(?!\\w))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.nss punctuation.definition.comment.begin.nss"
        },
        "3": {
          "name": "comment.block.nss"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.nss punctuation.definition.comment.end.nss"
            },
            {
              "match": "\\*",
              "name": "comment.block.nss"
            }
          ]
        },
        "5": {
          "name": "keyword.control.case.nss"
        }
      },
      "end": "(:)",
      "endCaptures": {
        "1": {
          "name": "punctuation.separator.colon.case.nss"
        }
      },
      "patterns": [
        {
          "include": "#evaluation_context"
        },
        {
          "include": "#nwscript_conditional_context"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.documentation.nss",
          "begin": "(?:^)(?>\\s*)(\\/\\/[!\\/]+)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.documentation.nss"
            }
          },
          "end": "(?<=\\n)(?<!\\\\\\n)",
          "patterns": [
            {
              "include": "#line_continuation_character"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.nss"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.nss"
                },
                "2": {
                  "name": "markup.italic.doxygen.nss"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.nss"
                },
                "2": {
                  "name": "markup.bold.doxygen.nss"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.nss"
                },
                "2": {
                  "name": "markup.inline.raw.string.nss"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.nss"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.nss"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.nss"
                },
                "2": {
                  "patterns": [
                    {
                      "match": "in|out",
                      "name": "keyword.other.parameter.direction.$0.nss"
                    }
                  ]
                },
                "3": {
                  "name": "variable.parameter.nss"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.nss"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.nss"
            },
            {
              "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
              "name": "storage.type.class.gtkdoc"
            }
          ]
        },
        {
          "match": "(\\/\\*[!*]+(?=\\s))(.+)([!*]*\\*\\/)",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.begin.documentation.nss"
            },
            "2": {
              "patterns": [
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.nss"
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.nss"
                    },
                    "2": {
                      "name": "markup.italic.doxygen.nss"
                    }
                  }
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.nss"
                    },
                    "2": {
                      "name": "markup.bold.doxygen.nss"
                    }
                  }
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.nss"
                    },
                    "2": {
                      "name": "markup.inline.raw.string.nss"
                    }
                  }
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.nss"
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.nss"
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.nss"
                    },
                    "2": {
                      "patterns": [
                        {
                          "match": "in|out",
                          "name": "keyword.other.parameter.direction.$0.nss"
                        }
                      ]
                    },
                    "3": {
                      "name": "variable.parameter.nss"
                    }
                  }
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.nss"
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.nss"
                },
                {
                  "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
                  "name": "storage.type.class.gtkdoc"
                }
              ]
            },
            "3": {
              "name": "punctuation.definition.comment.end.documentation.nss"
            }
          },
          "name": "comment.block.documentation.nss"
        },
        {
          "name": "comment.block.documentation.nss",
          "begin": "((?>\\s*)\\/\\*[!*]+(?:(?:\\n|$)|(?=\\s)))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin.documentation.nss"
            }
          },
          "end": "([!*]*\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end.documentation.nss"
            }
          },
          "patterns": [
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.nss"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.nss"
                },
                "2": {
                  "name": "markup.italic.doxygen.nss"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.nss"
                },
                "2": {
                  "name": "markup.bold.doxygen.nss"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.nss"
                },
                "2": {
                  "name": "markup.inline.raw.string.nss"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.nss"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.nss"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.nss"
                },
                "2": {
                  "patterns": [
                    {
                      "match": "in|out",
                      "name": "keyword.other.parameter.direction.$0.nss"
                    }
                  ]
                },
                "3": {
                  "name": "variable.parameter.nss"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.nss"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.nss"
            },
            {
              "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
              "name": "storage.type.class.gtkdoc"
            }
          ]
        },
        {
          "match": "^\\/\\* =(\\s*.*?)\\s*= \\*\\/$\\n?",
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.block.nss"
            }
          },
          "name": "comment.block.banner.nss"
        },
        {
          "name": "comment.block.nss",
          "begin": "(\\/\\*)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin.nss"
            }
          },
          "end": "(\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end.nss"
            }
          }
        },
        {
          "match": "^\\/\\/ =(\\s*.*?)\\s*=$\\n?",
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.line.nss"
            }
          },
          "name": "comment.line.banner.nss"
        },
        {
          "begin": "((?:^[ \\t]+)?)(?=\\/\\/)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.nss"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "name": "comment.line.double-slash.nss",
              "begin": "(\\/\\/)",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.definition.comment.nss"
                }
              },
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#line_continuation_character"
                }
              ]
            }
          ]
        }
      ]
    },
    "default_statement": {
      "name": "meta.conditional.case.nss",
      "begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)default(?!\\w))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.nss punctuation.definition.comment.begin.nss"
        },
        "3": {
          "name": "comment.block.nss"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.nss punctuation.definition.comment.end.nss"
            },
            {
              "match": "\\*",
              "name": "comment.block.nss"
            }
          ]
        },
        "5": {
          "name": "keyword.control.default.nss"
        }
      },
      "end": "(:)",
      "endCaptures": {
        "1": {
          "name": "punctuation.separator.colon.case.default.nss"
        }
      },
      "patterns": [
        {
          "include": "#evaluation_context"
        },
        {
          "include": "#nwscript_conditional_context"
        }
      ]
    },
    "disabled": {
      "begin": "^\\s*#\\s*if(n?def)?\\b.*$",
      "end": "^\\s*#\\s*endif\\b",
      "patterns": [
        {
          "include": "#disabled"
        },
        {
          "include": "#pragma-mark"
        }
      ]
    },
    "evaluation_context": {
      "patterns": [
        {
          "include": "#function-call-innards"
        },
        {
          "include": "$base"
        }
      ]
    },
    "function-call-innards": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#dot-access"
        },
        {
          "include": "#operators"
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.nss"
            },
            "2": {
              "name": "punctuation.section.arguments.begin.bracket.round.nss"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.nss"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.nss"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.nss"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "include": "#block_innards"
        }
      ]
    },
    "function-innards": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#operators"
        },
        {
          "name": "meta.function.definition.parameters.nss",
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.nss"
            },
            "2": {
              "name": "punctuation.section.parameters.begin.bracket.round.nss"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parameters.end.bracket.round.nss"
            }
          },
          "patterns": [
            {
              "include": "#probably_a_parameter"
            },
            {
              "include": "#probably_a_default_parameter"
            },
            {
              "include": "#function-innards"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.nss"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.nss"
            }
          },
          "patterns": [
            {
              "include": "#function-innards"
            }
          ]
        },
        {
          "include": "$base"
        }
      ]
    },
    "inline_comment": {
      "match": "(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/))",
      "captures": {
        "1": {
          "name": "comment.block.nss punctuation.definition.comment.begin.nss"
        },
        "2": {
          "name": "comment.block.nss"
        },
        "3": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.nss punctuation.definition.comment.end.nss"
            },
            {
              "match": "\\*",
              "name": "comment.block.nss"
            }
          ]
        }
      }
    },
    "line_continuation_character": {
      "patterns": [
        {
          "match": "(\\\\)\\n",
          "captures": {
            "1": {
              "name": "constant.character.escape.line-continuation.nss"
            }
          }
        }
      ]
    },
    "numbers": {
      "match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
      "captures": {
        "0": {
          "patterns": [
            {
              "begin": "(?=.)",
              "end": "$",
              "patterns": [
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.nss"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.nss",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "constant.numeric.hexadecimal.nss"
                    },
                    "5": {
                      "name": "constant.numeric.hexadecimal.nss",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "8": {
                      "name": "keyword.other.unit.exponent.hexadecimal.nss"
                    },
                    "9": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.nss"
                    },
                    "10": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.nss"
                    },
                    "11": {
                      "name": "constant.numeric.exponent.hexadecimal.nss",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "12": {
                      "name": "keyword.other.unit.suffix.floating-point.nss"
                    }
                  }
                },
                {
                  "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
                  "captures": {
                    "2": {
                      "name": "constant.numeric.decimal.nss",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "constant.numeric.decimal.point.nss"
                    },
                    "5": {
                      "name": "constant.numeric.decimal.nss",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "8": {
                      "name": "keyword.other.unit.exponent.decimal.nss"
                    },
                    "9": {
                      "name": "keyword.operator.plus.exponent.decimal.nss"
                    },
                    "10": {
                      "name": "keyword.operator.minus.exponent.decimal.nss"
                    },
                    "11": {
                      "name": "constant.numeric.exponent.decimal.nss",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "12": {
                      "name": "keyword.other.unit.suffix.floating-point.nss"
                    }
                  }
                },
                {
                  "match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.binary.nss"
                    },
                    "2": {
                      "name": "constant.numeric.binary.nss",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.nss"
                    }
                  }
                },
                {
                  "match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.octal.nss"
                    },
                    "2": {
                      "name": "constant.numeric.octal.nss",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.nss"
                    }
                  }
                },
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.nss"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.nss",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "5": {
                      "name": "keyword.other.unit.exponent.hexadecimal.nss"
                    },
                    "6": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.nss"
                    },
                    "7": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.nss"
                    },
                    "8": {
                      "name": "constant.numeric.exponent.hexadecimal.nss",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "9": {
                      "name": "keyword.other.unit.suffix.integer.nss"
                    }
                  }
                },
                {
                  "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "2": {
                      "name": "constant.numeric.decimal.nss",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "5": {
                      "name": "keyword.other.unit.exponent.decimal.nss"
                    },
                    "6": {
                      "name": "keyword.operator.plus.exponent.decimal.nss"
                    },
                    "7": {
                      "name": "keyword.operator.minus.exponent.decimal.nss"
                    },
                    "8": {
                      "name": "constant.numeric.exponent.decimal.nss",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "9": {
                      "name": "keyword.other.unit.suffix.integer.nss"
                    }
                  }
                },
                {
                  "match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
                  "name": "invalid.illegal.constant.numeric"
                }
              ]
            }
          ]
        }
      }
    },
    "operators": {
      "patterns": [
        {
          "match": "--",
          "name": "keyword.operator.decrement.nss"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.nss"
        },
        {
          "match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
          "name": "keyword.operator.assignment.compound.nss"
        },
        {
          "match": "&=|\\^=|<<=|>>=|\\|=",
          "name": "keyword.operator.assignment.compound.bitwise.nss"
        },
        {
          "match": "<<|>>",
          "name": "keyword.operator.bitwise.shift.nss"
        },
        {
          "match": "!=|<=|>=|==|<|>",
          "name": "keyword.operator.comparison.nss"
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.nss"
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.nss"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.nss"
        },
        {
          "match": "%|\\*|/|-|\\+",
          "name": "keyword.operator.nss"
        },
        {
          "begin": "(\\?)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.ternary.nss"
            }
          },
          "end": "(:)",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.ternary.nss"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "parens": {
      "name": "meta.parens.nss",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.nss"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.nss"
        }
      },
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    "parens-block": {
      "name": "meta.parens.block.nss",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.nss"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.nss"
        }
      },
      "patterns": [
        {
          "include": "#block_innards"
        },
        {
          "match": "(?-mix:(?<!:):(?!:))",
          "name": "punctuation.range-based.nss"
        }
      ]
    },
    "pragma-mark": {
      "captures": {
        "1": {
          "name": "meta.preprocessor.pragma.nss"
        },
        "2": {
          "name": "keyword.control.directive.pragma.pragma-mark.nss"
        },
        "3": {
          "name": "punctuation.definition.directive.nss"
        },
        "4": {
          "name": "entity.name.tag.pragma-mark.nss"
        }
      },
      "match": "^\\s*(((#)\\s*pragma\\s+mark)\\s+(.*))",
      "name": "meta.section.nss"
    },
    "preprocessor-rule-conditional": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.nss"
            },
            "1": {
              "name": "keyword.control.directive.conditional.nss"
            },
            "2": {
              "name": "punctuation.definition.directive.nss"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.nss"
            },
            "1": {
              "name": "keyword.control.directive.conditional.nss"
            },
            "2": {
              "name": "punctuation.definition.directive.nss"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.nss",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#preprocessor-rule-enabled-elif"
            },
            {
              "include": "#preprocessor-rule-enabled-else"
            },
            {
              "include": "#preprocessor-rule-disabled-elif"
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.directive.conditional.nss"
                },
                "2": {
                  "name": "punctuation.definition.directive.nss"
                }
              },
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.nss",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "$base"
            }
          ]
        },
        {
          "match": "^\\s*#\\s*(else|elif|endif)\\b",
          "captures": {
            "0": {
              "name": "invalid.illegal.stray-$1.nss"
            }
          }
        }
      ]
    },
    "preprocessor-rule-conditional-block": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.nss"
            },
            "1": {
              "name": "keyword.control.directive.conditional.nss"
            },
            "2": {
              "name": "punctuation.definition.directive.nss"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.nss"
            },
            "1": {
              "name": "keyword.control.directive.conditional.nss"
            },
            "2": {
              "name": "punctuation.definition.directive.nss"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.nss",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#preprocessor-rule-enabled-elif-block"
            },
            {
              "include": "#preprocessor-rule-enabled-else-block"
            },
            {
              "include": "#preprocessor-rule-disabled-elif"
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.directive.conditional.nss"
                },
                "2": {
                  "name": "punctuation.definition.directive.nss"
                }
              },
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.nss",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "match": "^\\s*#\\s*(else|elif|endif)\\b",
          "captures": {
            "0": {
              "name": "invalid.illegal.stray-$1.nss"
            }
          }
        }
      ]
    },
    "preprocessor-rule-conditional-line": {
      "patterns": [
        {
          "match": "(?:\\bdefined\\b\\s*$)|(?:\\bdefined\\b(?=\\s*\\(*\\s*(?:(?!defined\\b)[a-zA-Z_$][\\w$]*\\b)\\s*\\)*\\s*(?:\\n|//|/\\*|\\?|\\:|&&|\\|\\||\\\\\\s*\\n)))",
          "name": "keyword.control.directive.conditional.nss"
        },
        {
          "match": "\\bdefined\\b",
          "name": "invalid.illegal.macro-name.nss"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        },
        {
          "begin": "\\?",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.ternary.nss"
            }
          },
          "end": ":",
          "endCaptures": {
            "0": {
              "name": "keyword.operator.ternary.nss"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        },
        {
          "include": "#operators"
        },
        {
          "match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
          "name": "constant.language.nss"
        },
        {
          "match": "[a-zA-Z_$][\\w$]*",
          "name": "entity.name.function.preprocessor.nss"
        },
        {
          "include": "#line_continuation_character"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.nss"
            }
          },
          "end": "\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.nss"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-define-line-blocks": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.nss"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.nss"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-blocks"
            },
            {
              "include": "#preprocessor-rule-define-line-contents"
            }
          ]
        },
        {
          "include": "#preprocessor-rule-define-line-contents"
        }
      ]
    },
    "preprocessor-rule-define-line-contents": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.nss"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.nss"
            }
          },
          "name": "meta.block.nss",
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-blocks"
            }
          ]
        },
        {
          "match": "\\(",
          "name": "punctuation.section.parens.begin.bracket.round.nss"
        },
        {
          "match": "\\)",
          "name": "punctuation.section.parens.end.bracket.round.nss"
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|return|void)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
          "end": "(?<=\\))(?!\\w)|(?<!\\\\)(?=\\s*\\n)",
          "name": "meta.function.nss",
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-functions"
            }
          ]
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.nss"
            }
          },
          "end": "\"|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.nss"
            }
          },
          "name": "string.quoted.double.nss",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_placeholder"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.nss"
            }
          },
          "end": "'|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.nss"
            }
          },
          "name": "string.quoted.single.nss",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "include": "#dot-access"
        },
        {
          "include": "$base"
        }
      ]
    },
    "preprocessor-rule-define-line-functions": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#dot-access"
        },
        {
          "include": "#operators"
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.nss"
            },
            "2": {
              "name": "punctuation.section.arguments.begin.bracket.round.nss"
            }
          },
          "end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.arguments.end.bracket.round.nss"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-functions"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.nss"
            }
          },
          "end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parens.end.bracket.round.nss"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-functions"
            }
          ]
        },
        {
          "include": "#preprocessor-rule-define-line-contents"
        }
      ]
    },
    "preprocessor-rule-disabled": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.nss"
            },
            "1": {
              "name": "keyword.control.directive.conditional.nss"
            },
            "2": {
              "name": "punctuation.definition.directive.nss"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.nss"
            },
            "1": {
              "name": "keyword.control.directive.conditional.nss"
            },
            "2": {
              "name": "punctuation.definition.directive.nss"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.nss",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "include": "#preprocessor-rule-enabled-elif"
            },
            {
              "include": "#preprocessor-rule-enabled-else"
            },
            {
              "include": "#preprocessor-rule-disabled-elif"
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.nss"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.nss"
                },
                "2": {
                  "name": "punctuation.definition.directive.nss"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
              "patterns": [
                {
                  "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                  "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                  "name": "meta.preprocessor.nss",
                  "patterns": [
                    {
                      "include": "#preprocessor-rule-conditional-line"
                    }
                  ]
                },
                {
                  "include": "$base"
                }
              ]
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.if-branch.nss",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            }
          ]
        }
      ]
    },
    "preprocessor-rule-disabled-block": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.nss"
            },
            "1": {
              "name": "keyword.control.directive.conditional.nss"
            },
            "2": {
              "name": "punctuation.definition.directive.nss"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.nss"
            },
            "1": {
              "name": "keyword.control.directive.conditional.nss"
            },
            "2": {
              "name": "punctuation.definition.directive.nss"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.nss",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "include": "#preprocessor-rule-enabled-elif-block"
            },
            {
              "include": "#preprocessor-rule-enabled-else-block"
            },
            {
              "include": "#preprocessor-rule-disabled-elif"
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.nss"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.nss"
                },
                "2": {
                  "name": "punctuation.definition.directive.nss"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
              "patterns": [
                {
                  "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                  "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                  "name": "meta.preprocessor.nss",
                  "patterns": [
                    {
                      "include": "#preprocessor-rule-conditional-line"
                    }
                  ]
                },
                {
                  "include": "#block_innards"
                }
              ]
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.if-branch.in-block.nss",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            }
          ]
        }
      ]
    },
    "preprocessor-rule-disabled-elif": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.nss"
        },
        "1": {
          "name": "keyword.control.directive.conditional.nss"
        },
        "2": {
          "name": "punctuation.definition.directive.nss"
        }
      },
      "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.nss",
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        },
        {
          "include": "#comments"
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
          "contentName": "comment.block.preprocessor.elif-branch.nss",
          "patterns": [
            {
              "include": "#disabled"
            },
            {
              "include": "#pragma-mark"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.nss"
            },
            "1": {
              "name": "keyword.control.directive.conditional.nss"
            },
            "2": {
              "name": "punctuation.definition.directive.nss"
            },
            "3": {
              "name": "constant.numeric.preprocessor.nss"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.nss"
            },
            "1": {
              "name": "keyword.control.directive.conditional.nss"
            },
            "2": {
              "name": "punctuation.definition.directive.nss"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.nss",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "begin": "^\\s*((#)\\s*else\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.nss"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.nss"
                },
                "2": {
                  "name": "punctuation.definition.directive.nss"
                }
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "contentName": "comment.block.preprocessor.else-branch.nss",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.nss"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.nss"
                },
                "2": {
                  "name": "punctuation.definition.directive.nss"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.if-branch.nss",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "$base"
                }
              ]
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-block": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.nss"
            },
            "1": {
              "name": "keyword.control.directive.conditional.nss"
            },
            "2": {
              "name": "punctuation.definition.directive.nss"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.nss"
            },
            "1": {
              "name": "keyword.control.directive.conditional.nss"
            },
            "2": {
              "name": "punctuation.definition.directive.nss"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.nss",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "begin": "^\\s*((#)\\s*else\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.nss"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.nss"
                },
                "2": {
                  "name": "punctuation.definition.directive.nss"
                }
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "contentName": "comment.block.preprocessor.else-branch.in-block.nss",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.nss"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.nss"
                },
                "2": {
                  "name": "punctuation.definition.directive.nss"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.if-branch.in-block.nss",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "#block_innards"
                }
              ]
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-elif": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.nss"
        },
        "1": {
          "name": "keyword.control.directive.conditional.nss"
        },
        "2": {
          "name": "punctuation.definition.directive.nss"
        }
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.nss",
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        },
        {
          "include": "#comments"
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
          "patterns": [
            {
              "begin": "^\\s*((#)\\s*(else)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.nss"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.nss"
                },
                "2": {
                  "name": "punctuation.definition.directive.nss"
                }
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "contentName": "comment.block.preprocessor.elif-branch.nss",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "^\\s*((#)\\s*(elif)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.nss"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.nss"
                },
                "2": {
                  "name": "punctuation.definition.directive.nss"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.elif-branch.nss",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-elif-block": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.nss"
        },
        "1": {
          "name": "keyword.control.directive.conditional.nss"
        },
        "2": {
          "name": "punctuation.definition.directive.nss"
        }
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.nss",
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        },
        {
          "include": "#comments"
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
          "patterns": [
            {
              "begin": "^\\s*((#)\\s*(else)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.nss"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.nss"
                },
                "2": {
                  "name": "punctuation.definition.directive.nss"
                }
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "contentName": "comment.block.preprocessor.elif-branch.in-block.nss",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "^\\s*((#)\\s*(elif)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.nss"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.nss"
                },
                "2": {
                  "name": "punctuation.definition.directive.nss"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.elif-branch.nss",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "include": "#block_innards"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-else": {
      "begin": "^\\s*((#)\\s*else\\b)",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.nss"
        },
        "1": {
          "name": "keyword.control.directive.conditional.nss"
        },
        "2": {
          "name": "punctuation.definition.directive.nss"
        }
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    "preprocessor-rule-enabled-else-block": {
      "begin": "^\\s*((#)\\s*else\\b)",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.nss"
        },
        "1": {
          "name": "keyword.control.directive.conditional.nss"
        },
        "2": {
          "name": "punctuation.definition.directive.nss"
        }
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "include": "#block_innards"
        }
      ]
    },
    "probably_a_parameter": {
      "match": "(?<=(?:[a-zA-Z_0-9] |[&*>\\]\\)]))\\s*([a-zA-Z_]\\w*)\\s*(?=(?:\\[\\]\\s*)?(?:,|\\)))",
      "captures": {
        "1": {
          "name": "variable.parameter.nss"
        }
      }
    },
    "probably_a_default_parameter": {
      "match": "(\\b[a-zA-Z_][a-zA-Z_0-9]*\\b) (=) ",
      "captures": {
        "1": {
          "name": "variable.parameter.nss"
        },
        "2": {
          "name": "keyword.operator.assignment.nss"
        }
      }
    },
    "storage_types": {
      "patterns": [
        {
          "match": "(const){0,1} *\\b(action|effect|event|float|int|itemproperty|location|object|string|talent|vector|void|json|sqlquery|cassowary)\\b (?(1)(\\S*)|)",
          "captures": {
            "1": {
              "name": "storage.modifier.nss"
            },
            "2": {
              "name": "storage.type.built-in.nss"
            },
            "3": {
              "name": "constant.language.nss"
            }
          }
        },
        {
          "match": "\\b(struct)\\b \\b([a-zA-Z_][a-zA-Z0-9_]*\\b(?!\\s*\\())",
          "captures": {
            "1": {
              "name": "storage.type.built-in.nss"
            },
            "2": {
              "name": "storage.type.struct-defined.nss"
            }
          }
        }
      ]
    },
    "string_escaped_char": {
      "patterns": [
        {
          "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
          "name": "constant.character.escape.nss"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unknown-escape.nss"
        }
      ]
    },
    "string_placeholder": {
      "patterns": [
        {
          "match": "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
          "name": "constant.other.placeholder.nss"
        },
        {
          "match": "(%)(?!\"\\s*(PRI|SCN))",
          "captures": {
            "1": {
              "name": "invalid.illegal.placeholder.nss"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.nss"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.nss"
            }
          },
          "name": "string.quoted.double.nss",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_placeholder"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.nss"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.nss"
            }
          },
          "name": "string.quoted.single.nss",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        }
      ]
    },
    "switch_conditional_parentheses": {
      "name": "meta.conditional.switch.nss",
      "begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))(\\()",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.nss punctuation.definition.comment.begin.nss"
        },
        "3": {
          "name": "comment.block.nss"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.nss punctuation.definition.comment.end.nss"
            },
            {
              "match": "\\*",
              "name": "comment.block.nss"
            }
          ]
        },
        "5": {
          "name": "punctuation.section.parens.begin.bracket.round.conditional.switch.nss"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parens.end.bracket.round.conditional.switch.nss"
        }
      },
      "patterns": [
        {
          "include": "#evaluation_context"
        },
        {
          "include": "#nwscript_conditional_context"
        }
      ]
    },
    "switch_statement": {
      "name": "meta.block.switch.nss",
      "begin": "(((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)switch(?!\\w)))",
      "beginCaptures": {
        "1": {
          "name": "meta.head.switch.nss"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.nss punctuation.definition.comment.begin.nss"
        },
        "4": {
          "name": "comment.block.nss"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.nss punctuation.definition.comment.end.nss"
            },
            {
              "match": "\\*",
              "name": "comment.block.nss"
            }
          ]
        },
        "6": {
          "name": "keyword.control.switch.nss"
        }
      },
      "end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
      "patterns": [
        {
          "name": "meta.head.switch.nss",
          "begin": "\\G ?",
          "end": "((?:\\{|<%|\\?\\?<|(?=;)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.switch.nss"
            }
          },
          "patterns": [
            {
              "include": "#switch_conditional_parentheses"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.body.switch.nss",
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "(\\}|%>|\\?\\?>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.switch.nss"
            }
          },
          "patterns": [
            {
              "include": "#default_statement"
            },
            {
              "include": "#case_statement"
            },
            {
              "include": "$self"
            },
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "name": "meta.tail.switch.nss",
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s\\n]*",
          "end": "[\\s\\n]*(?=;)",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    }
  }
}
